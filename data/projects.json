[
    {
        "title": "Personal Portfolio Website",
        "imageLarge": "/images/portfolioWeb.png",
        "imageSmall": "/images/webLang.png",
        "languages": "HTML, CSS, JS",
        "description": "A personal portfolio website showcasing my projects, work experience, and contact information. The website features a responsive design, interactive elements, and a functional contact form. Built using HTML, CSS, and JavaScript to provide a seamless user experience.",
        "link": "https://github.com/peds24/cse134b-hw5-personal-website"
    },
    {
        "title": "WebScribe",
        "imageLarge": "/images/webscribe.png",
        "imageSmall": "/images/webLang.png",
        "languages": "HTML, CSS, JS",
        "description": "A UI design project that evolved from ocean-themed wireframes to a modern, minimalist interface. Features transparent rotating panes with a matte glass aesthetic, multiple color schemes, and interactive elements like volume control and sliding animations. The design approach uses background-only color tagging for a distinctive look, inspired by apps like Obsidian, Fantastical, and TickTick.",
        "link": "https://github.com/cse110-sp24-group17/cse110-sp24-group17"
    },
    {
        "title": "Compress/Uncompress a File",
        "imageLarge": "/images/encoding.jpg",
        "imageSmall": "/images/C.png",
        "languages": "C++",
        "description": "A C++ tool utilizing Huffman encoding for text file compression and decompression. Includes a compression program for optimized character representation and a decompression program that reconstructs the original text. Features a header file for character frequency data and plans to optimize header format using array indexing for efficient storage.",
        "link": "private"
    },
    {
        "title": "Graph Project",
        "imageLarge": "/images/graphProj.png",
        "imageSmall": "/images/C.png",
        "languages": "C++",
        "description": "A custom C++ graph class developed for an advanced data structures course at UCSD. Implements Dijkstra's algorithm, a modified BFS for shortest paths, and a Disjoint Set for connected components with threshold constraints. Focused on runtime efficiency and adherence to API specifications.",
        "link": "private"
    }
    ,
    {
        "title": "Digital Book Library Tool",
        "imageLarge": "/images/digitalLibrary.png",
        "imageSmall": "/images/python.png",
        "languages": "Python",
        "description": "Developed a full-stack Python application integrating the Google Books API for metadata retrieval with data storage that manages diverse media types including books, comics, and manga. Implemented multiple data input methods including manual entry, individual ISBN lookups, and bulk imports to streamline collection management and reduce cataloging time. Designed a modular, extensible codebase with clean architecture principles that separates API handling, database management, and core functionality for maintainability and future expansion. Currently planning implementation of a GUI inspired by the Library of Babel website for an interactive, web-accessible display and consultation of book collections.",
        "link": "private"
    }
]